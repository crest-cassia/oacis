= form_for @host, html: {class: 'form-horizontal'} do |f|
  - error_messages = @host.errors.full_messages + @host.host_parameter_definitions.map {|pdef| pdef.errors.full_messages }.flatten
  = render partial: 'shared/error_messages', locals: {error_messages: error_messages}
  .form-group
    = f.label(:name, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:name, class: 'form-control')
  .form-group
    = f.label(:hostname, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:hostname, class: 'form-control')
  .form-group
    = f.label(:status, 'Polling Status', class: 'col-md-2 control-label')
    .col-md-3
      = f.select(:status, Host::HOST_STATUS, {}, {class: 'form-control'})
  .form-group
    = f.label(:user, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:user, class: 'form-control')
  .form-group
    = f.label(:port, class: 'col-md-2 control-label')
    .col-md-3
      = f.number_field(:port, class: 'form-control')
  .form-group
    = f.label(:ssh_key, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:ssh_key, class: 'form-control')
  .form-group
    = f.label(:scheduler_type, class: 'col-md-2 control-label')
    .col-md-3
      - types = SchedulerWrapper::TYPES.map {|t| (t=="none" or t=="xsub") ? [t,t] : [t+' (obsolete)',t] }
      = f.select(:scheduler_type, types, {}, {class: 'form-control'})
  .form-group
    = f.label(:work_base_dir, class: 'col-md-2 control-label')
    .col-md-3
      - if @host.work_base_dir_is_not_editable?
        = f.text_field(:work_base_dir, class: 'form-control', disabled: true);
        not editable when a submitted run exists
      - else
        = f.text_field(:work_base_dir, class: 'form-control')
  .form-group
    = f.label(:mounted_work_base_dir, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:mounted_work_base_dir, class: 'form-control')
  .form-group
    = f.label(:max_num_jobs, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:max_num_jobs, class: 'form-control')
  .form-group
    = f.label(:polling_interval, class: 'col-md-2 control-label')
    .col-md-3
      = f.text_field(:polling_interval, class: 'form-control')
  .form-group
    = f.label(:min_mpi_procs, 'MPI processes', class: 'col-md-2 control-label')
    .form-group.col-md-5.small-margin-bottom
      .col-md-5
        = f.number_field(:min_mpi_procs, class: 'form-control')
      .col-md-1.range-tilde
        \~
      .col-md-5
        = f.number_field(:max_mpi_procs, class: 'form-control')
  .form-group
    = f.label(:min_omp_threads, 'OMP threads', class: 'col-md-2 control-label')
    .form-group.col-md-5.small-margin-bottom
      .col-md-5
        = f.number_field(:min_omp_threads, class: 'form-control')
      .col-md-1.range-tilde
        \~
      .col-md-5
        = f.number_field(:max_omp_threads, class: 'form-control')
  .form-group
    = f.label(:template, class: 'col-md-2 control-label')
    .col-md-7
      = f.text_area(:template, rows: 20, class: 'form-control')
  #host_parameters_definition.form-group
    = label_tag('', 'Definition of Host Parameters', class: 'col-md-2 control-label')
    .col-md-10
      = f.fields_for :host_parameter_definitions do |builder|
        = render 'host_parameter_definition_fields', f: builder
      = link_to_add_fields "Add Parameter", f, :host_parameter_definitions
  .form-group
    %label.col-md-2.control-label
      Executable Simulators
    .col-md-10
      = hidden_field_tag "host[executable_simulator_ids][]", nil
      - Simulator.all.each do |sim|
        .checkbox
          %label{ for: dom_id(sim) }
            = check_box_tag "host[executable_simulator_ids][]", sim.id.to_s, @host.executable_simulator_ids.include?(sim.id), id: dom_id(sim)
            = sim.name
  .form-group
    .col-md-4.col-md-offset-2
      = f.submit('Save', class: 'btn btn-primary')
      = link_to('Cancel', (@host.persisted? ? @host : hosts_path), class: 'btn')
      %a{class: 'btn btn-warning', id: 'load_default_template', data: JobScriptUtil::DEFAULT_TEMPLATE} Load default template

:javascript
  function update_template_and_host_parameters_field() {
    if( $('#host_scheduler_type option:selected').text() == "xsub" ) {
      $('#host_template').attr("disabled", "disabled");
      $('#host_parameters_definition').hide();
    }
    else {
      $('#host_template').removeAttr("disabled");
      $('#host_parameters_definition').show();
    }
  }

  $(function() {
    update_template_and_host_parameters_field();
    $('#host_scheduler_type').change( update_template_and_host_parameters_field );
  });

  $(function(){
    $('a#load_default_template').on('click', function(){
      if(confirm('Are you sure to load default template?')){
        $('textarea#host_template').text($('a#load_default_template').attr('data'));
      }
    });
  });

