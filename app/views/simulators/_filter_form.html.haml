.modal-header
  %button.close{type: "button", "data-dismiss": "modal"}
    &times;
  %h4 Filter
  .modal-body.large#parameter_filter_setting_body
    %form.form_inline#filter_form{'data-current-q': q.to_json}
      .row
        .form-group.col-md-3.filter_form_field#select_param_form
          - options = simulator.parameter_definitions.map {|x| [x.key, x.key, {'data-param-type': x.type}] }
          = select_tag "param", options_for_select(options), class: 'form-control'
        .form-group.col-md-2.filter_form_field#select_matcher_form
          = select_tag "matcher", options_for_select(["",""]), class: 'form-control'
        .form-group.col-md-3.filter_form_field#select_value_form
          = text_field_tag "value", "", class: 'form-control'
        .col-md-4.filter_form_field
          %a{href:'#'}
            %i.fa.fa-times#delete_field_icon{style: "padding-top: 10px;"}
          #error_message{style: "display: inline;"}
    %a#add_filter_form{href:'#'}
      %i.fa.fa-plus
  .modal-footer
    - if @simulator.parameter_set_filters.size > 0
      %button#parameter_set_filters_list_btn.btn.btn-default{onclick: "$('#parameter_set_filters_list_modal').modal('show');"}
        Load Filter
    %button#parameter_filter_ok.btn.btn-primary
      OK

:javascript
  function update_matcher_select(row) {
    const type = row.find('select#param option:selected').data('param-type');
    let matcher_val, matcher_text;
    if(type == "Integer" || type == "Float") {
      matcher_val = #{raw ParameterSetFilter::NumTypeMatchers.to_json};
      matcher_text = #{raw ParameterSetFilter::NumTypeMatcherStrings.to_json};
    } else if(type == "String") {
      matcher_val = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
      matcher_text = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
    }
    const sel_matcher = row.find('select#matcher');
    sel_matcher.empty();
    for(const i in matcher_val){
      sel_matcher.append('<option value="'+matcher_val[i]+'">'+matcher_text[i]+'</option>');
    }
  }
  $(function() {
    let field = $('#filter_form').html();
    $('#add_filter_form').click(function() {
      const appended = $(field).appendTo('#filter_form');
      update_matcher_select(appended);
    });
    $("#filter_form").on("change", "#select_param_form select", function() {
      const row = $(this).closest('.row');
      update_matcher_select(row);
    });
    $("#parameter_set_filter_form_modal").on('show.bs.modal', function() {
      $('#filter_form').empty();
      const q = $('#filter_form').data('current-q');
      for(const condition of q) {
        const key = condition[0];
        const matcher = condition[1];
        const val = condition[2];
        const appended = $(field).appendTo('#filter_form');
        appended.find('select#param').val(key);
        appended.find('input#value').val(val);
        update_matcher_select(appended);
        appended.find('select#matcher').val(matcher);
      }
    });
    $('#parameter_filter_ok').on('click', function() {
      const q = [];
      $('#filter_form .row').each(function(i,o) {
        const param = $(o).find('select#param').val();
        const matcher = $(o).find('select#matcher').val();
        const val = $(o).find('input#value').val();
        q.push([param,matcher,val]);
      });
      const sim_path = "#{raw simulator_path(simulator)}";
      var path = sim_path + '?q=' + encodeURIComponent(JSON.stringify(q));
      location.href = path;
    });
  });

