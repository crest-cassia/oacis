%h3 List of Parameter Sets

%div{align: "right"}
  = link_to "Go to Explorer(beta)", explore_simulator_path

%table.table.table-condensed.table-striped#params_list{:'data-source' => "#{_parameters_list_simulator_path(@simulator.to_param, format: "json", query_id: @query_id)}"}
  %thead
    %tr
      - ParameterSetsListDatatable.header(@simulator).each do |th_element|
        = raw(th_element)
  %tbody

.form-actions
  %a.btn.btn-primary{href: new_simulator_parameter_set_path(@simulator)}
    New Parameter Set
  
%h3 Parameter Filter
= form_tag( _make_query_simulator_path(@simulator) ) do |f|
  %table
    %tbody
      %tr
        %td
          "Key"
        %td
          "Matcher"
        %td
          "Value"
      %tr#queries_form_original
        %td#select_param_form
          - prm_def = @simulator.parameter_definitions.map {|x| [x.key, {"type" => x.type, "default" => x.default}] }
          - prm_def = Hash[*prm_def.flatten]
          = select_tag "query[][param]", options_for_select(prm_def)
        %td#select_matcher_form
          = select_tag "query[][matcher]", options_for_select({""=>""})
        %td#select_value_form
          = text_field_tag "query[][value]"
  .controls
    .btn#add_queries_form Add more filters
    = hidden_field_tag "query_id", @query_id
    = submit_tag "Save this Filter", :class => 'btn btn-primary'

- if @query_list
  %h4 Select Fileter
  = form_for(@simulator, :url=>{:controller=>"simulators", :action=>"show"}, :html => { :method => :get } ) do |f|
    = select_tag "query_id", options_for_select(@query_list, @query_id), :prompt => "all"
    = f.submit "Load Filter", :class => 'btn btn-primary', :name => nil

- unless @query_id.blank?
  %h4 Delete Fileter
  = form_tag( _make_query_simulator_path(@simulator) ) do |f|
    = hidden_field_tag "query_id", @query_id
    = submit_tag "Delete this Filter", :class => 'btn btn-primary', :name => :delete_query, :confirm => 'Are you sure?'

:javascript
  $(function() {
    $('#add_queries_form').click(function() {
      var cloned = $('#queries_form_original').clone();
      $('#add_queries_form').before($(cloned));
      $("select" ,cloned).trigger("change");
    });
  });

  $(function() {
    $("body").on("change", "#select_param_form select", function(){
      $("#select_matcher_form option",$(this).parent().parent()).remove()
      var matcher_form_selector = $("#select_matcher_form",$(this).parent().parent())
      var matcher_val;
      var matcher_text;
      if($(":selected",this).attr('type') == "Integer" || $(":selected",this).attr('type') == "Float") {
        matcher_val = #{raw ParameterSetQuery::NumTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::NumTypeMatcherStrings.to_json};
      } else if($(":selected",this).attr('type') == "Boolean") {
        matcher_val = #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
      } else if($(":selected",this).attr('type') == "String") {
        matcher_val = #{raw ParameterSetQuery::StringTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::StringTypeMatchers.to_json};
      }

      for(i in matcher_val){
        $("select",matcher_form_selector).append("<option value=\"\"></option>");
        $("option:nth-child("+(parseInt(i)+1)+")",matcher_form_selector).val(matcher_val[i]).text(matcher_text[i]);
      }

      var value_form_selector = $("#select_value_form",$(this).parent().parent())
      $("input",value_form_selector).remove()
      value_form_selector.append("<input id=\"query__value\" name=\"query[][value]\" type=\"text\" value="+ $(":selected",this).attr('default') +">")
    });
  });

  $(function() {
    var parameter_form_selector = $("#select_param_form select")
    parameter_form_selector.val("#{@simulator.parameter_definitions.first.key}");
    parameter_form_selector.trigger("change");
  });

  var param_list_table_width;

  $(function() {
    param_list_table_width = $("#params_list").width()
  });

:javascript
  var oPsTable;
  function reload_parameter_sets_table() {
    oPsTable.fnReloadAjax();
  }

  $(function() {
    oPsTable = $('#params_list').dataTable({
      bProcessing: true,
      bServerSide: true,
      bFilter: false,
      aaSorting: [[ 3, "desc" ]],
      bAutoWidth: false,
      iDisplayLength: 100,
      sAjaxSource: $('#params_list').data('source'),
      sDom: "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>",
      sPaginationType: "bootstrap"
    });
    $('#params_list_length').append(
      '<i class="icon-refresh" id="params_list_refresh"></i>'
    );
    var refresh_icon = $('#params_list_length').children('#params_list_refresh')
    refresh_icon.on('click', reload_parameter_sets_table);
  })

  $(function() {
    $("#params_list").on("click", "img.treebtn[parameter_set_id]", function() {
      if ($(this).attr("state") == "close") {
        $("img.treebtn[state='open']", $(this).closest("tbody") ).each(function(){
          $(this).trigger("click");
        });
        var td_element = $(this).closest("td");
        var tr_element = $(this).closest("tr");
        var param_id = $(this).attr("parameter_set_id");
        var table_cols = tr_element.children("td").length;
        $(this)
          .attr("state", "open")
          .attr("src", "/assets/collapse.png")
        $.get("/parameter_sets/"+param_id+"/_runs_and_analyses", function(data) {
          tr_element.after(
            $("<tr>").attr("id", "ps_"+param_id).html(
              $("<td>").attr({colspan: table_cols}).html(
                $("<div>").attr("class", "well").html(data)
              )
            )
          );
          $("#runs_list" ,tr_element.next()).trigger("change");
        });
      } else {
        $(this)
          .attr("state", "close")
          .attr("src", "/assets/expand.png")
        var td_element = $(this).closest("td")
        var param_id = $(this).attr("parameter_set_id")
        var run_list = $(this).closest("tr").siblings("tr#ps_"+param_id)
        run_list.remove()
      }
    });
  })

:javascript
  $(function() {
    $("body").on("change", "#runs_list", function() {
      var oTable = datatables_for_runs_table();
      aoRunsTables = [];
      aoRunsTables.push(oTable);
    })
  })