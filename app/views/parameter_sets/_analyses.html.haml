= render partial: 'shared/analyses', locals: {parameter_set: parameter_set}

- sim = parameter_set.simulator
- azrs = sim.analyzers_on_parameter_set
- if (OACIS_ACCESS_LEVEL >= 1) and azrs.exists?
  %h3 Create Analysis
  - anl = parameter_set.analyses.build
  = form_for( anl, :url => parameter_set_analyses_path(parameter_set), html: {class: 'form-horizontal'}, remote: true ) do |f|
    .form-group
      = f.label :analyzer, class: 'col-md-2 control-label'
      .col-md-3
        = f.select :analyzer, azrs.map { |x| [x.name, x.to_param] }, {}, {class: 'form-control', id: 'analysis_form_analyzer'}
    %div#analysis_parameters_form
    .form-group
      .col-md-2.col-md-offset-2
        = f.submit "Analyze", :class => 'btn btn-primary'
#analyses_list_modal.modal.large.fade
  .modal-dialog.modal-vertical-centered
    .modal-content
      .modal-header
        %button.close{type: "button", "data-dismiss" => "modal"}
          &times;
        %h4.modal-title
      .modal-body.large#analyses_list_modal_page
      .modal-footer
        %button.btn.btn-default{type: "button", "data-dismiss" => "modal"}
          Close

:javascript
  $(function() {
    var update_analysis_mpi_omp_fields = function(analyzer_id, host_id) {
      var mpi_field = $('input#analysis_mpi_procs');
      var omp_field = $('input#analysis_omp_threads');
      if( mpi_field.size() + omp_field.size() == 0 ) return;
      var url = "#{_default_mpi_omp_analyzer_url(':analyzer_id')}.json" + "?host_id=" + host_id;
      url = url.replace(':analyzer_id', analyzer_id);
      $.get(url, function(data) {
        if( mpi_field.size() > 0 ) { mpi_field.val(data['mpi_procs']); }
        if( omp_field.size() > 0 ) { omp_field.val(data['omp_threads']); }
      });
    }
    var update_host_parameters = function(analyzer_id, host_id) {
      var url = "#{_host_parameters_field_analyzer_url(':analyzer_id')}" + "?host_id=" + host_id;
      url = url.replace(':analyzer_id', analyzer_id);
      $.get(url, function(data) {
        $('#analysis_host_parameters').html(data);
      });
    }
    var analyzer_field = $('#analysis_form_analyzer')
    analyzer_field.change(function(){
      var analyzer_id = $(this).val();
      $.get("#{_parameters_form_analyzer_path(':analyzer_id')}".replace(':analyzer_id',analyzer_id), function(data) {
        $('#analysis_parameters_form').html(data);
        var submitted_to = $('#analysis_parameters_form select#analysis_submitted_to');
        submitted_to.change(function() {
          var host_id = $(this).val();
          update_analysis_mpi_omp_fields( analyzer_id, host_id );
          update_host_parameters( analyzer_id, host_id );
        });
        submitted_to.trigger('change');
      });
    });
    if( $('#analysis_form_analyzer').length > 0 ) {
      analyzer_field.trigger('change');
    }
  });

- if parameter_set.analyses.present?
  %h2 Results
- parameter_set.analyses.where(status: :finished).each do |anl|
  %hr
  %h3= "Result of Analysis: #{anl.analyzer.name}"
  = link_to(anl.id,anl)
  - if anl.parameters.present?
    = render partial: "shared/parameters_table", locals: {parameters_hash: anl.parameters}
  = render partial: "shared/results", locals: {result: anl.result, result_paths: anl.result_paths, archived_result_path: anl.archived_result_path }
