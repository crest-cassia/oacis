==========================================
インストール
==========================================

ここではセットアップ方法について説明する。

サポートされるプラットフォーム
==================================

サポートされるプラットフォームは以下の通り。

- サーバー
    - Linux, Mac OSXなどのUnix系OS
        - Mac OS 10.8, Ubuntu, CentOSで動作実績あり
- 計算ホスト
    - Linux, Mac OSXなどのUnix系OS
        - Mac OS 10.8, Ubuntu, CentOSで動作実績あり
        - bash がインストールされていること
- クライアント
    - Google Chrome および Firefox でテストされている
        - (IEでの挙動は未確認)

前提条件
==================================

サーバーでは事前に以下のものをインストールする必要がある。

- Ruby 1.9.3
- bundler (http://bundler.io/)
- MongoDB 2.4以上 (http://www.mongodb.org/)

| Mac OS Xの場合、homebrew (http://brew.sh/) を使ってインストールするのが手軽で良い。

以下ではこれらのものがインストールされている前提で説明する。

| CMは各研究者が自分のPCにインストールし、イントラネット内で使用されることを想定している。
| インターネット上へ公開し不特定多数のアクセスを受け付ける場合は、ここで記述したセットアップに加えてセキュリティーや不可分散の対策を十分に行う必要がある。
| Railsの知識が十分ある方以外は推奨しない。

インストール
===================================

まず手元にCASSIA Managerのソースコード一式をダウンロードする。

次にRailsおよび関連gemのインストールを行う。ダウンロードしたディレクトリにて、 ::

  bundle install --binstubs --path=vendor/bundle

| を実行する。
| 成功すればこの時点でRailsを起動させることができる。試しに以下のコマンドで起動する。

  bundle exec rails s

| http://localhost:3000 にアクセスし、ページが適切に表示されればインストールは成功している。
| もし失敗した場合は、MongoDBが正しく起動しているか、ファイアウォールは3000番に対して開いているか、gemは正しくインストールされたか、などを確認する。
| 端末で Ctrl-C を押し、Railsを停止させる。

RailsおよびWorkerの起動
========================================

Railsおよびworkerの起動は以下のコマンドを実行する。 ::

  bundle exec rake daemon:start

http://localhost:3000 にアクセスできればRailsの起動が成功している。
またWorkerプロセスが起動しているかどうかは ::

  ps aux | grep "[w]orker.rb"

を実行すれば確認できる。プロセスが表示されればWorkerは正しく起動している。

これらのプロセスの再起動、および停止は以下のコマンドで実行できる。 ::

  bundle exec rake daemon:restart
  bundle exec rake daemon:stop

パスワードの設定
========================================

| Digest認証に使用するパスワードを設定する。この設定を行わなくても使用することはできるが、セキュリティのために設定することを強く勧める。
| app/controllers/application_controller.rb の８行目を編集する。
| ８行目の先頭の # を取り除きコメントアウトを解除し、ユーザー名とパスワードをセットする。デフォルトのパスワードは使用しないこと。
| これでページにアクセスした際にユーザー認証が要求されるようになる。

Firewallの設定
========================================

| 現状のCASSIA Managerはユーザー管理機能を持っていないため、ネットワーク内の任意のホストからアクセス可能である。
| 他のホストからのアクセスを制限するためにはファイアウォールを設定するのが最も簡単である。
| Railsは3000番、MongoDBは27017番のポートをそれぞれ使用しているので、これらのポートへのアクセスを限定する。
| MongoDBへのアクセスはローカルホストのみ、Railsは使用するユーザーのみに開放するのが望ましい。

データベースの変更
========================================

デフォルトではローカルのデータベースにアクセスするが、他のホストのデータベースを参照する事も可能である。
config/mongoid.yml の中でMongoDBへの接続情報を設定しているので、これを変更してRailsおよびWorkerを再起動する。
